### Check server root
GET http://localhost:8000
Accept: application/json

### ================= USERS =================

### Add a new user
POST http://localhost:8000/api/auth/register
Content-Type: application/json

{
  "name": "ahmed",
  "email": "ahmed@me.com",
  "password": "book123"
}

###

### Add another user
POST http://localhost:8000/api/auth/register
Content-Type: application/json

{
  "name": "Obi",
  "email": "Obiwan@me.com",
  "password": "hellothere1"
}

###

### Login user
POST http://localhost:8000/api/auth/login
Content-Type: application/json

{
  "email": "ahmed@me.com",
  "password": "book123"
}

###

### Get my profile
GET http://localhost:8000/api/auth/profile
Accept: application/json

###


### Get all users
GET http://localhost:8000/api/users
Accept: application/json

###

### Get a specific user by ID (replace :userid with actual user ID)
GET http://localhost:8000/api/users/1

###

### Update a user by ID (replace :userid with actual user ID)
PUT http://localhost:8000/api/users/6
Content-Type: application/json

{
  "name": "Hodor Hodor",
  "password": "hodor"
}

###

### Delete a user by ID (replace :userid with actual user ID)
DELETE http://localhost:8000/api/users/1
Accept: application/json

###

### Add user with missing fields (should fail)
POST http://localhost:8000/api/users
Content-Type: application/json

{
  "name": "forgotPassword"
}

### ================= ACCOUNTS =================

### Create a new checking account for a user
POST http://localhost:8000/api/accounts
Content-Type: application/json

{
  "userid": 1,
  "type": "checking",
  "balance": 500
}

###

### Create a new saving account for a user
POST http://localhost:8000/api/accounts
Content-Type: application/json

{
  "userid": 12,
  "type": "saving",
  "balance": 1000
}

###


### Check all accounts for user
GET http://localhost:8000/api/accounts/5
Accept: application/json

###

### Test case for accounts validation: Missing type or userid should fail
POST http://localhost:8000/api/accounts
Content-Type: application/json

{
  "userid": 1
}

###

### Test case for accounts validation: Missing type or userid should fail
POST http://localhost:8000/api/accounts
Content-Type: application/json

{
  "userid": 1,
  "type": "money",
  "balance": 500
}

###

### Test case: Attempt to delete account with trsnaction should fail
DELETE http://localhost:8000/api/accounts/1
Accept: application/json

### Register insecure user (stores plaintext)
POST http://localhost:8000/api/auth/insecure/register
Content-Type: application/json

{
  "name": "lab_insecure",
  "email": "insecure@example.test",
  "password": "insecurePass123"
}


###

### Login insecure (POST body) â€” returns token in body and sets insecure cookie
POST http://localhost:8000/api/auth/insecure/login
Content-Type: application/json

{
  "email": "insecure@example.test",
  "password": "insecurePass123"
}
###